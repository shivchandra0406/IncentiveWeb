
  useEffect(() => {
    if (isEditMode && id) {
      fetchDealDetails(id);
    }

    // Fetch teams and incentive rules regardless of mode
    fetchTeams();
    fetchIncentiveRules();
  }, [id, isEditMode]);

  const fetchTeams = async () => {
    try {
      setLoadingTeams(true);
      const response = await teamService.getTeams();
      if (response.succeeded) {
        setTeams(response.data);
      } else {
        console.error('Failed to fetch teams:', response.message);
      }
    } catch (err: any) {
      console.error('Error fetching teams:', err);
    } finally {
      setLoadingTeams(false);
    }
  };

  const fetchIncentiveRules = async () => {
    try {
      setLoadingIncentiveRules(true);
      const response = await incentiveRuleService.getIncentiveRules();
      if (response.succeeded) {
        setIncentiveRules(response.data);
      } else {
        console.error('Failed to fetch incentive rules:', response.message);
      }
    } catch (err: any) {
      console.error('Error fetching incentive rules:', err);
    } finally {
      setLoadingIncentiveRules(false);
    }
  };

  const fetchDealDetails = async (dealId: string) => {
    try {
      setLoading(true);
      setError(null);
      const response = await dealService.getDealById(dealId);

      if (response.succeeded && response.data) {
        const deal = response.data;
        setDealName(deal.dealName);
        setCustomerName(deal.customerName);
        setCustomerEmail(deal.customerEmail || '');
        setCustomerPhone(deal.customerPhone || '');
        setCustomerAddress(deal.customerAddress || '');
        setTotalAmount(deal.totalAmount);
        setCurrencyType(deal.currencyType);
        setTaxPercentage(deal.taxPercentage);
        setDiscountAmount(deal.discountAmount);
        setStatus(deal.status);
        setDealDate(deal.dealDate ? new Date(deal.dealDate) : new Date());
        setPaymentDueDate(deal.paymentDueDate ? new Date(deal.paymentDueDate) : null);
        setSource(deal.source);
        setNotes(deal.notes || '');
        setReferralName(deal.referralName || '');
        setReferralEmail(deal.referralEmail || '');
        setReferralPhone(deal.referralPhone || '');
        setReferralCommission(deal.referralCommission || '');
        setIsReferralCommissionPaid(deal.isReferralCommissionPaid || false);
        setRecurringFrequencyMonths(deal.recurringFrequencyMonths || '');
        setTeamId(deal.teamId || '');
        setIncentiveRuleId(deal.incentiveRuleId || '');
      } else {
        setError(response.message || 'Failed to fetch deal details');
      }
    } catch (err: any) {
      console.error('Error fetching deal details:', err);
      setError(err.message || 'An error occurred while fetching deal details');
    } finally {
      setLoading(false);
    }
  };

  const validateForm = (): boolean => {
    const errors: FormErrors = {};

    if (!dealName.trim()) errors.dealName = 'Deal name is required';
    if (dealName.length > 200) errors.dealName = 'Deal name must be less than 200 characters';

    if (!customerName.trim()) errors.customerName = 'Customer name is required';
    if (customerName.length > 200) errors.customerName = 'Customer name must be less than 200 characters';

    if (customerEmail && !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(customerEmail)) {
      errors.customerEmail = 'Invalid email format';
    }
    if (customerEmail && customerEmail.length > 100) errors.customerEmail = 'Email must be less than 100 characters';

    if (customerPhone && customerPhone.length > 50) errors.customerPhone = 'Phone must be less than 50 characters';

    if (totalAmount === '') errors.totalAmount = 'Total amount is required';
    if (typeof totalAmount === 'number' && totalAmount < 0) errors.totalAmount = 'Total amount must be positive';

    if (!currencyType) errors.currencyType = 'Currency type is required';

    if (taxPercentage === '') errors.taxPercentage = 'Tax percentage is required';
    if (typeof taxPercentage === 'number' && (taxPercentage < 0 || taxPercentage > 100)) {
      errors.taxPercentage = 'Tax percentage must be between 0 and 100';
    }

    if (discountAmount === '') errors.discountAmount = 'Discount amount is required';
    if (typeof discountAmount === 'number' && discountAmount < 0) {
      errors.discountAmount = 'Discount amount must be positive';
    }

    if (!status) errors.status = 'Status is required';

    if (!dealDate) errors.dealDate = 'Deal date is required';

    if (!source.trim()) errors.source = 'Source is required';
    if (source.length > 100) errors.source = 'Source must be less than 100 characters';

    if (referralName && referralName.length > 200) {
      errors.referralName = 'Referral name must be less than 200 characters';
    }

    if (referralEmail && !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(referralEmail)) {
      errors.referralEmail = 'Invalid referral email format';
    }
    if (referralEmail && referralEmail.length > 100) {
      errors.referralEmail = 'Referral email must be less than 100 characters';
    }

    if (referralPhone && referralPhone.length > 50) {
      errors.referralPhone = 'Referral phone must be less than 50 characters';
    }

    if (referralCommission !== '' && typeof referralCommission === 'number' && referralCommission < 0) {
      errors.referralCommission = 'Referral commission must be positive';
    }

    if (recurringFrequencyMonths !== '' && typeof recurringFrequencyMonths === 'number' &&
        (recurringFrequencyMonths < 0 || recurringFrequencyMonths > 60)) {
      errors.recurringFrequencyMonths = 'Recurring frequency must be between 0 and 60 months';
    }

    setFormErrors(errors);
    return Object.keys(errors).length === 0;
  };

  const handleSubmit = async () => {
    if (!validateForm()) return;

    try {
      setLoading(true);
      setError(null);
      setSuccess(null);

      if (isEditMode && id) {
        // Update existing deal
        const updateData: UpdateDealRequest = {
          dealName,
          customerName,
          customerEmail: customerEmail || undefined,
          customerPhone: customerPhone || undefined,
          customerAddress: customerAddress || undefined,
          totalAmount: typeof totalAmount === 'number' ? totalAmount : 0,
          currencyType,
          taxPercentage: typeof taxPercentage === 'number' ? taxPercentage : 0,
          discountAmount: typeof discountAmount === 'number' ? discountAmount : 0,
          status,
          paymentDueDate: paymentDueDate ? paymentDueDate.toISOString() : undefined,
          teamId: teamId || undefined,
          referralName: referralName || undefined,
          referralEmail: referralEmail || undefined,
          referralPhone: referralPhone || undefined,
          referralCommission: typeof referralCommission === 'number' ? referralCommission : undefined,
          isReferralCommissionPaid,
          source,
          incentiveRuleId: incentiveRuleId || undefined,
          notes: notes || undefined,
          recurringFrequencyMonths: typeof recurringFrequencyMonths === 'number' ? recurringFrequencyMonths : undefined
        };

        const response = await dealService.updateDeal(id, updateData);
        if (response.succeeded) {
          setSuccess('Deal updated successfully');
          setTimeout(() => {
            navigate('/deals');
          }, 1500);
        } else {
          setError(response.message || 'Failed to update deal');
        }
      } else {
        // Create new deal
        const createData: CreateDealRequest = {
          dealName,
          customerName,
          customerEmail: customerEmail || undefined,
          customerPhone: customerPhone || undefined,
          customerAddress: customerAddress || undefined,
          totalAmount: typeof totalAmount === 'number' ? totalAmount : 0,
          currencyType,
          taxPercentage: typeof taxPercentage === 'number' ? taxPercentage : 0,
          discountAmount: typeof discountAmount === 'number' ? discountAmount : 0,
          status,
          dealDate: dealDate ? dealDate.toISOString() : new Date().toISOString(),
          paymentDueDate: paymentDueDate ? paymentDueDate.toISOString() : undefined,
          teamId: teamId || undefined,
          referralName: referralName || undefined,
          referralEmail: referralEmail || undefined,
          referralPhone: referralPhone || undefined,
          referralCommission: typeof referralCommission === 'number' ? referralCommission : undefined,
          source,
          incentivePlanId: incentiveRuleId || undefined,
          notes: notes || undefined,
          recurringFrequencyMonths: typeof recurringFrequencyMonths === 'number' ? recurringFrequencyMonths : undefined
        };

        const response = await dealService.createDeal(createData);
        if (response.succeeded) {
          setSuccess('Deal created successfully');
          setTimeout(() => {
            navigate('/deals');
          }, 1500);
        } else {
          setError(response.message || 'Failed to create deal');
        }
      }
    } catch (err: any) {
      console.error('Error saving deal:', err);
      setError(err.message || 'An error occurred while saving the deal');
    } finally {
      setLoading(false);
    }
  };
