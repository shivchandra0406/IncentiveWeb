import React, { useState, useEffect } from 'react';
import {
  Box,
  Typography,
  Paper,
  TextField,
  Button,
  Grid as MuiGrid,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  FormHelperText,
  CircularProgress,
  Alert,
  InputAdornment,
  Card,
  CardContent,
  Switch,
  IconButton,
} from '@mui/material';

// Create a Grid component that accepts 'item' prop
const Grid = MuiGrid as any;
import InfoIcon from '@mui/icons-material/Info';
import { useNavigate, useParams } from 'react-router-dom';
import { DatePicker } from '@mui/x-date-pickers/DatePicker';
import { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';
import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';
import dealService from '../../infrastructure/deals/DealServiceImpl';
import teamService from '../../infrastructure/teams/TeamServiceImpl';
import incentiveRuleService from '../../infrastructure/incentiveRules/IncentiveRuleServiceImpl';
import { DealStatus, CurrencyType } from '../../core/models/deal';
import type{ Team } from '../../core/models/incentivePlanTypes';
import type { CreateDealRequest, UpdateDealRequest } from '../../core/models/deal';

interface FormErrors {
  dealName?: string;
  customerName?: string;
  customerEmail?: string;
  customerPhone?: string;
  totalAmount?: string;
  currencyType?: string;
  taxPercentage?: string;
  discountAmount?: string;
  status?: string;
  dealDate?: string;
  paymentDueDate?: string;
  source?: string;
  referralName?: string;
  referralEmail?: string;
  referralPhone?: string;
  referralCommission?: string;
  recurringFrequencyMonths?: string;
}

const DealForm: React.FC = () => {
  const { id } = useParams<{ id: string }>();
  const navigate = useNavigate();
  const isEditMode = !!id;

  // Form state
  const [dealName, setDealName] = useState('');
  const [customerName, setCustomerName] = useState('');
  const [customerEmail, setCustomerEmail] = useState('');
  const [customerPhone, setCustomerPhone] = useState('');
  const [customerAddress, setCustomerAddress] = useState('');
  const [totalAmount, setTotalAmount] = useState<number | ''>('');
  const [currencyType, setCurrencyType] = useState<CurrencyType>(CurrencyType.Rupees);
  const [taxPercentage, setTaxPercentage] = useState<number | ''>(0);
  const [discountAmount, setDiscountAmount] = useState<number | ''>(0);
  const [status, setStatus] = useState<DealStatus>(DealStatus.New);
  const [dealDate, setDealDate] = useState<Date | null>(new Date());
  const [isActive, setIsActive] = useState(true);
  const [paymentDueDate, setPaymentDueDate] = useState<Date | null>(null);
  const [source, setSource] = useState('');
  const [notes, setNotes] = useState('');
  const [referralName, setReferralName] = useState('');
  const [referralEmail, setReferralEmail] = useState('');
  const [referralPhone, setReferralPhone] = useState('');
  const [referralCommission, setReferralCommission] = useState<number | ''>('');
  const [isReferralCommissionPaid, setIsReferralCommissionPaid] = useState(false);
  const [recurringFrequencyMonths, setRecurringFrequencyMonths] = useState<number | ''>('');
  const [teamId, setTeamId] = useState<string | ''>('');
  const [incentiveRuleId, setIncentiveRuleId] = useState<string | ''>('');

  // Data state
  const [teams, setTeams] = useState<Team[]>([]);
  const [incentiveRules, setIncentiveRules] = useState<any[]>([]);
  const [loadingTeams, setLoadingTeams] = useState(false);
  const [loadingIncentiveRules, setLoadingIncentiveRules] = useState(false);

  // UI state
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [success, setSuccess] = useState<string | null>(null);
  const [formErrors, setFormErrors] = useState<FormErrors>({});

  useEffect(() => {
    if (isEditMode && id) {
      fetchDealDetails(id);
    }

    // Fetch teams and incentive rules regardless of mode
    fetchTeams();
    fetchIncentiveRules();
  }, [id, isEditMode]);

  const fetchTeams = async () => {
    try {
      setLoadingTeams(true);
      const response = await teamService.getAllTeams();
      setTeams(response);
    } catch (error) {
      console.error('Error fetching teams:', error);
      setError('Failed to fetch teams. Please try again.');
    } finally {
      setLoadingTeams(false);
    }
  };

  const fetchIncentiveRules = async () => {
    try {
      setLoadingIncentiveRules(true);
      const response = await incentiveRuleService.getAllIncentiveRules();
      setIncentiveRules(response);
    } catch (error) {
      console.error('Error fetching incentive rules:', error);
      setError('Failed to fetch incentive rules. Please try again.');
    } finally {
      setLoadingIncentiveRules(false);
    }
  };

  const fetchDealDetails = async (dealId: string) => {
    try {
      setLoading(true);
      const deal = await dealService.getDealById(dealId);
      
      // Populate form fields with deal data
      setDealName(deal.dealName);
      setCustomerName(deal.customerName);
      setCustomerEmail(deal.customerEmail || '');
      setCustomerPhone(deal.customerPhone || '');
      setCustomerAddress(deal.customerAddress || '');
      setTotalAmount(deal.totalAmount);
      setCurrencyType(deal.currencyType);
      setTaxPercentage(deal.taxPercentage || 0);
      setDiscountAmount(deal.discountAmount || 0);
      setStatus(deal.status);
      setDealDate(deal.dealDate ? new Date(deal.dealDate) : new Date());
      setIsActive(deal.isActive);
      setPaymentDueDate(deal.paymentDueDate ? new Date(deal.paymentDueDate) : null);
      setSource(deal.source || '');
      setNotes(deal.notes || '');
      setReferralName(deal.referralName || '');
      setReferralEmail(deal.referralEmail || '');
      setReferralPhone(deal.referralPhone || '');
      setReferralCommission(deal.referralCommission || '');
      setIsReferralCommissionPaid(deal.isReferralCommissionPaid || false);
      setRecurringFrequencyMonths(deal.recurringFrequencyMonths || '');
      setTeamId(deal.teamId || '');
      setIncentiveRuleId(deal.incentiveRuleId || '');
      
    } catch (error) {
      console.error('Error fetching deal details:', error);
      setError('Failed to fetch deal details. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  const validateForm = (): boolean => {
    const errors: FormErrors = {};
    let isValid = true;

    // Required fields validation
    if (!dealName.trim()) {
      errors.dealName = 'Deal name is required';
      isValid = false;
    }

    if (!customerName.trim()) {
      errors.customerName = 'Customer name is required';
      isValid = false;
    }

    if (customerEmail && !/^\S+@\S+\.\S+$/.test(customerEmail)) {
      errors.customerEmail = 'Invalid email format';
      isValid = false;
    }

    if (customerPhone && !/^\d{10}$/.test(customerPhone.replace(/\D/g, ''))) {
      errors.customerPhone = 'Phone number should be 10 digits';
      isValid = false;
    }

    if (totalAmount === '') {
      errors.totalAmount = 'Total amount is required';
      isValid = false;
    } else if (Number(totalAmount) <= 0) {
      errors.totalAmount = 'Total amount must be greater than 0';
      isValid = false;
    }

    if (!currencyType) {
      errors.currencyType = 'Currency type is required';
      isValid = false;
    }

    if (taxPercentage !== '' && (Number(taxPercentage) < 0 || Number(taxPercentage) > 100)) {
      errors.taxPercentage = 'Tax percentage must be between 0 and 100';
      isValid = false;
    }

    if (discountAmount !== '' && Number(discountAmount) < 0) {
      errors.discountAmount = 'Discount amount cannot be negative';
      isValid = false;
    }

    if (!status) {
      errors.status = 'Status is required';
      isValid = false;
    }

    if (!dealDate) {
      errors.dealDate = 'Deal date is required';
      isValid = false;
    }

    if (referralEmail && !/^\S+@\S+\.\S+$/.test(referralEmail)) {
      errors.referralEmail = 'Invalid referral email format';
      isValid = false;
    }

    if (referralPhone && !/^\d{10}$/.test(referralPhone.replace(/\D/g, ''))) {
      errors.referralPhone = 'Referral phone number should be 10 digits';
      isValid = false;
    }

    if (referralCommission !== '' && Number(referralCommission) < 0) {
      errors.referralCommission = 'Referral commission cannot be negative';
      isValid = false;
    }

    if (recurringFrequencyMonths !== '' && (Number(recurringFrequencyMonths) <= 0 || !Number.isInteger(Number(recurringFrequencyMonths)))) {
      errors.recurringFrequencyMonths = 'Recurring frequency must be a positive integer';
      isValid = false;
    }

    setFormErrors(errors);
    return isValid;
  };

  const handleSubmit = async () => {
    if (!validateForm()) {
      return;
    }

    try {
      setLoading(true);
      setError(null);

      const dealData = {
        dealName,
        customerName,
        customerEmail,
        customerPhone,
        customerAddress,
        totalAmount: Number(totalAmount),
        currencyType,
        taxPercentage: taxPercentage !== '' ? Number(taxPercentage) : 0,
        discountAmount: discountAmount !== '' ? Number(discountAmount) : 0,
        status,
        dealDate: dealDate?.toISOString(),
        isActive,
        paymentDueDate: paymentDueDate?.toISOString(),
        source,
        notes,
        referralName,
        referralEmail,
        referralPhone,
        referralCommission: referralCommission !== '' ? Number(referralCommission) : 0,
        isReferralCommissionPaid,
        recurringFrequencyMonths: recurringFrequencyMonths !== '' ? Number(recurringFrequencyMonths) : undefined,
        teamId: teamId || undefined,
        incentiveRuleId: incentiveRuleId || undefined,
      };

      if (isEditMode && id) {
        // Update existing deal
        await dealService.updateDeal(id, dealData as UpdateDealRequest);
        setSuccess('Deal updated successfully!');
      } else {
        // Create new deal
        await dealService.createDeal(dealData as CreateDealRequest);
        setSuccess('Deal created successfully!');
      }

      // Navigate back to deals list after a short delay
      setTimeout(() => {
        navigate('/deals');
      }, 2000);
    } catch (error) {
      console.error('Error saving deal:', error);
      setError('Failed to save deal. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  return (
    <Box sx={{ p: 3, maxWidth: '1200px', margin: '0 auto' }}>
      <Typography variant="h4" sx={{ mb: 4, fontWeight: 600 }}>
        {isEditMode ? 'Edit Deal' : 'Create New Deal'}
      </Typography>

      {error && (
        <Alert severity="error" sx={{ mb: 3 }}>
          {error}
        </Alert>
      )}
      {success && (
        <Alert severity="success" sx={{ mb: 3 }}>
          {success}
        </Alert>
      )}

      {/* Section 1: Deal Information */}
      <Card sx={{ mb: 3, borderRadius: 2, boxShadow: '0 1px 4px rgba(0,0,0,0.05)', width: '100%' }}>
        <CardContent sx={{ p: 3, width: '100%' }}>
          <Box sx={{ display: 'flex', alignItems: 'center', mb: 3 }}>
            <Typography variant="h6" sx={{ fontWeight: 600 }}>
              Deal Information
            </Typography>
            <IconButton size="small" sx={{ ml: 1 }}>
              <InfoIcon fontSize="small" />
            </IconButton>
          </Box>
          <Grid container spacing={3}>
            {/* Add your Deal Information form fields here */}
          </Grid>
        </CardContent>
      </Card>

      {/* Section 2: Customer Information */}
      <Card sx={{ mb: 3, borderRadius: 2, boxShadow: '0 1px 4px rgba(0,0,0,0.05)', width: '100%' }}>
        <CardContent sx={{ p: 3, width: '100%' }}>
          <Box sx={{ display: 'flex', alignItems: 'center', mb: 3 }}>
            <Typography variant="h6" sx={{ fontWeight: 600 }}>
              Customer Information
            </Typography>
            <IconButton size="small" sx={{ ml: 1 }}>
              <InfoIcon fontSize="small" />
            </IconButton>
          </Box>
          <Grid container spacing={3}>
            {/* Add your Customer Information form fields here */}
          </Grid>
        </CardContent>
      </Card>

      {/* Section 3: Financial Details */}
      <Card sx={{ mb: 3, borderRadius: 2, boxShadow: '0 1px 4px rgba(0,0,0,0.05)', width: '100%' }}>
        <CardContent sx={{ p: 3, width: '100%' }}>
          <Box sx={{ display: 'flex', alignItems: 'center', mb: 3 }}>
            <Typography variant="h6" sx={{ fontWeight: 600 }}>
              Financial Details
            </Typography>
            <IconButton size="small" sx={{ ml: 1 }}>
              <InfoIcon fontSize="small" />
            </IconButton>
          </Box>
          <Grid container spacing={3}>
            {/* Add your Financial Details form fields here */}
          </Grid>
        </CardContent>
      </Card>

      {/* Section 4: Referral Information */}
      <Card sx={{ mb: 3, borderRadius: 2, boxShadow: '0 1px 4px rgba(0,0,0,0.05)', width: '100%' }}>
        <CardContent sx={{ p: 3, width: '100%' }}>
          <Box sx={{ display: 'flex', alignItems: 'center', mb: 3 }}>
            <Typography variant="h6" sx={{ fontWeight: 600 }}>
              Referral Information
            </Typography>
            <IconButton size="small" sx={{ ml: 1 }}>
              <InfoIcon fontSize="small" />
            </IconButton>
          </Box>
          <Grid container spacing={3}>
            {/* Add your Referral Information form fields here */}
          </Grid>
        </CardContent>
      </Card>

      {/* Section 5: Notes */}
      <Card sx={{ mb: 3, borderRadius: 2, boxShadow: '0 1px 4px rgba(0,0,0,0.05)', width: '100%' }}>
        <CardContent sx={{ p: 3, width: '100%' }}>
          <Box sx={{ display: 'flex', alignItems: 'center', mb: 3 }}>
            <Typography variant="h6" sx={{ fontWeight: 600 }}>
              Notes
            </Typography>
            <IconButton size="small" sx={{ ml: 1 }}>
              <InfoIcon fontSize="small" />
            </IconButton>
          </Box>
          <Grid container spacing={3}>
            <Grid item xs={12}>
              <TextField
                fullWidth
                label="Notes"
                value={notes}
                onChange={(e) => setNotes(e.target.value)}
                multiline
                rows={4}
                sx={{ width: '100%' }}
              />
            </Grid>
          </Grid>
        </CardContent>
      </Card>

      {/* Action Buttons */}
      <Box sx={{ display: 'flex', justifyContent: 'flex-end', mt: 4, width: '100%' }}>
        <Button
          variant="outlined"
          onClick={() => navigate('/deals')}
          sx={{
            mr: 2,
            minWidth: '150px',
            borderColor: '#00b8a9',
            color: '#00b8a9',
            padding: '10px 24px',
            '&:hover': {
              borderColor: '#00a99d',
              backgroundColor: 'rgba(0, 184, 169, 0.08)',
            }
          }}
        >
          Cancel
        </Button>
        <Button
          variant="contained"
          onClick={handleSubmit}
          disabled={loading}
          sx={{
            bgcolor: '#00b8a9',
            padding: '10px 24px',
            minWidth: '150px',
            '&:hover': {
              bgcolor: '#00a99d',
            },
            '&.Mui-disabled': {
              bgcolor: 'rgba(0, 184, 169, 0.5)',
            }
          }}
        >
          {loading ? (
            <CircularProgress size={24} color="inherit" />
          ) : (
            isEditMode ? 'Update' : 'Create'
          )}
        </Button>
      </Box>
    </Box>
  );
};

export default DealForm;
